# Fityk script. Fityk version: 1.3.1. Created: Sat Dec 18 16:58:57 2021

set verbosity = -1 #the rest of the file is not shown
set autoplot = 0
reset
# ------------  settings  ------------
set box_constraints = 1
set cwd = '/home/nico/Documentos/Ingenier√≠a/ProyectoGrado/balanced-binary-search-tree/benchmark'
set default_sigma = sqrt
set domain_percent = 30
set epsilon = 1e-12
set fit_replot = 0
set fitting_method = levenberg_marquardt
set ftol_rel = 0
set function_cutoff = 0
set guess_uses_weights = 1
set height_correction = 1
set lm_lambda_down_factor = 10
set lm_lambda_start = 0.001
set lm_lambda_up_factor = 10
set lm_max_lambda = 1e+15
set lm_stop_rel_change = 1e-07
set log_output = 0
set logfile = ''
set max_fitting_time = 0
set max_wssr_evaluations = 1000
set nm_convergence = 0.0001
set nm_distribution = bound
set nm_move_all = 0
set nm_move_factor = 1
set numeric_format = '%g'
set on_error = stop
set pseudo_random_seed = 0
set refresh_period = 4
set width_correction = 1
set xtol_rel = 0

# ------------  datasets ------------
use @0
title = ''
M=0
X=180# =max(x), prevents sorting.


# ------------  (un)defines  ------------
# define Constant(a=avgy) = a
# define Linear(a0=intercept, a1=slope) = a0 + a1 * x
# define Quadratic(a0=intercept, a1=slope, a2=0) = a0 + a1*x + a2*x^2
# define Cubic(a0=intercept, a1=slope, a2=0, a3=0) = a0 + a1*x + a2*x^2 + a3*x^3
# define Polynomial4(a0=intercept, a1=slope, a2=0, a3=0, a4=0) = a0 + a1*x + a2*x^2 + a3*x^3 + a4*x^4
# define Polynomial5(a0=intercept, a1=slope, a2=0, a3=0, a4=0, a5=0) = a0 + a1*x + a2*x^2 + a3*x^3 + a4*x^4 + a5*x^5
# define Polynomial6(a0=intercept, a1=slope, a2=0, a3=0, a4=0, a5=0, a6=0) = a0 + a1*x + a2*x^2 + a3*x^3 + a4*x^4 + a5*x^5 + a6*x^6
# define Gaussian(height, center, hwhm) = height*exp(-ln(2)*((x-center)/hwhm)^2)
# define SplitGaussian(height, center, hwhm1=hwhm, hwhm2=hwhm) = x<center ? Gaussian(height,center,hwhm1) : Gaussian(height,center,hwhm2)
# define Lorentzian(height, center, hwhm) = height/(1+((x-center)/hwhm)^2)
# define Pearson7(height, center, hwhm, shape=2) = height/(1+((x-center)/hwhm)^2*(2^(1/shape)-1))^shape
# define SplitPearson7(height, center, hwhm1=hwhm, hwhm2=hwhm, shape1=2, shape2=2) = x < center ? Pearson7(height, center, hwhm1, shape1) : Pearson7(height, center, hwhm2, shape2)
# define PseudoVoigt(height, center, hwhm, shape=0.5[0:1]) = height*((1-shape)*exp(-ln(2)*((x-center)/hwhm)^2)+shape/(1+((x-center)/hwhm)^2))
# define FCJAsymm(height, center, hwhm, shape=0.5, h_l, s_l) = Finger-Cox-Jephcoat asymmetry with PseudoVoight peakshape
# define Voigt(height, center, gwidth=hwhm*0.8, shape=0.1[0:1]) = convolution of Gaussian and Lorentzian #
# define VoigtA(area, center, gwidth=hwhm*0.8, shape=0.1[0:1]) = convolution of Gaussian and Lorentzian #
# define EMG(a=height, b=center, c=hwhm*0.8, d=hwhm*0.08) = a*c*(2*pi)^0.5/(2*d) * exp((b-x)/d + c^2/(2*d^2)) * (abs(d)/d - erf((b-x)/(2^0.5*c) + c/(2^0.5*d)))
# define DoniachSunjic(h=height, a=0.1, f=1, e=center) = h * cos(pi*a/2 + (1-a)*atan((x-e)/f)) / (f^2+(x-e)^2)^((1-a)/2)
# define PielaszekCube(a=height*0.016, center, r=300, s=150) = ...#
# define LogNormal(height, center, width=2*hwhm, asym=0.1) = height*exp(-ln(2)*(ln(2.0*asym*(x-center)/width+1)/asym)^2)
# define Spline() = cubic spline #
# define Polyline() = linear interpolation #
# define ExpDecay(a=0, t=1) = a*exp(-x/t)
# define GaussianA(area, center, hwhm) = Gaussian(area/hwhm/sqrt(pi/ln(2)), center, hwhm)
# define LogNormalA(area, center, width=2*hwhm, asym=0.1) = LogNormal(sqrt(ln(2)/pi)*(2*area/width)*exp(-asym^2/4/ln(2)), center, width, asym)
# define LorentzianA(area, center, hwhm) = Lorentzian(area/hwhm/pi, center, hwhm)
# define Pearson7A(area, center, hwhm, shape=2) = Pearson7(area/(hwhm*exp(lgamma(shape-0.5)-lgamma(shape))*sqrt(pi/(2^(1/shape)-1))), center, hwhm, shape)
# define PseudoVoigtA(area, center, hwhm, shape=0.5[0:1]) = GaussianA(area*(1-shape), center, hwhm) + LorentzianA(area*shape, center, hwhm)
# define Sigmoid(lower, upper, xmid, wsig) = lower + (upper-lower)/(1+exp((xmid-x)/wsig))
# define SplitLorentzian(height, center, hwhm1=hwhm, hwhm2=hwhm) = x < center ? Lorentzian(height, center, hwhm1) : Lorentzian(height, center, hwhm2)
# define SplitPseudoVoigt(height, center, hwhm1=hwhm, hwhm2=hwhm, shape1=0.5[0:1], shape2=0.5[0:1]) = x < center ? PseudoVoigt(height, center, hwhm1, shape1) : PseudoVoigt(height, center, hwhm2, shape2)
# define SplitVoigt(height, center, gwidth1=hwhm*0.8, gwidth2=hwhm*0.8, shape1=0.1[0:1], shape2=0.1[0:1]) = x < center ? Voigt(height, center, gwidth1, shape1) : Voigt(height, center, gwidth2, shape2)
define Exp2(a=1, b=1, c=0, d=0) = a*2^(b*x + c) + d
define Log2Linear(a=1, b=0, c=1, d=0, e=0) = (a*x + b) * ln(c*x + d) + e
define Log2(a=1, b=1, c=0, d=0) = a*ln(b*x + c) + d
define Exp(a=1, b=2, c=1, d=0, e=0) = a*b^(c*x + d) + e

# ------------  variables and functions  ------------


# ------------  models  ------------


plot [8:52] [-3.853:80.913]
use @0
set autoplot = 1
set verbosity = 0
